import telebot
from datetime import datetime, timedelta
import sqlite3
from telebot import types

TOKEN ="TOKEN"

bot = telebot.TeleBot(TOKEN)

def database():
    conn = sqlite3.connect('events.db', check_same_thread=False)
    cur = conn.cursor()
    '''
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
    –≠—Ç–∏ 3 —Ç–∞–±–ª–∏—Ü—ã:
    –£ users:
        chat_id (INTEGER PRIMARY KEY): id —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username (TEXT): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –£ events:
            - event_id (INTEGER PRIMARY KEY AUTOINCREMENT): id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
            - chat_id (INTEGER): id —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            - title (TEXT): –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
            - date (TEXT): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.
            - type (TEXT): –¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è).
            - tags (TEXT): –•—ç—à—Ç–µ–≥–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º.
    –£ notes:
            - note_id (INTEGER PRIMARY KEY AUTOINCREMENT): id –∑–∞–º–µ—Ç–∫–∏.
            - chat_id (INTEGER): id —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            - content (TEXT): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏.
            - created_at (TEXT DEFAULT CURRENT_TIMESTAMP): –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
            - updated_at (TEXT DEFAULT CURRENT_TIMESTAMP): –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
            '''
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY,
            username TEXT
        );
    ''')
    cur.execute('''
        CREATE TABLE IF NOT EXISTS events (
            event_id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            title TEXT,
            date TEXT,
            type TEXT,
            tags TEXT,
            FOREIGN KEY(chat_id) REFERENCES users(chat_id)
        );
    ''')
    cur.execute('''
        CREATE TABLE IF NOT EXISTS notes (
            note_id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            content TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(chat_id) REFERENCES users(chat_id)
        );
    ''')

    conn.commit()
    return conn, cur

conn, cur = database()

def registration(chat_id, username):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –ù–∞ –≤—Ö–æ–¥–µ:
        chat_id (int): id —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        True –∏–ª–∏ False
    """
    try:
        cur.execute("INSERT INTO users (chat_id, username) VALUES (?, ?)", (chat_id, username))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False

@bot.message_handler(commands=['start'])
def welcome(message):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start .
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name

    if not registration(chat_id, username):
        bot.reply_to(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        bot.reply_to(message, f"üëã –ü—Ä–∏–≤–µ—Ç, {username}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    menu(message)

def menu(message):
    """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        types.KeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∏")
    ]
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)

def show_events_menu(message):
    """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"),
        types.KeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    ]
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:", reply_markup=keyboard)

def show_notes_menu(message):
    """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        types.KeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏"),
        types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    ]
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏:", reply_markup=keyboard)

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
def add_event(message):
    """
       –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       """
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    bot.register_next_step_handler(msg, process_event_title)

def process_event_title(message):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É.
            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
    title = message.text.strip()
    if not title:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        bot.register_next_step_handler(msg, process_event_title)
        return
    msg = bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
    bot.register_next_step_handler(msg, process_event_date, title)

def process_event_date(message, title):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
        """
    date_str = message.text.strip()
    try:
        event_date = datetime.strptime(date_str, "%d-%m-%Y").date()
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ùå –î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–î–î-–ú–ú-–ì–ì–ì–ì):")
        bot.register_next_step_handler(msg, process_event_date, title)
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = [
        types.KeyboardButton(text="üéÇ –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è"),
        types.KeyboardButton(text="üíç –ì–æ–¥–æ–≤—â–∏–Ω–∞"),
        types.KeyboardButton(text="‚è∞ –î–µ–¥–ª–∞–π–Ω"),
        types.KeyboardButton(text="‚ûï –ü—Ä–æ—á–µ–µ")
    ]
    keyboard.add(*buttons)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_event_type, title, event_date)

def process_event_type(message, title, event_date):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ö—ç—à—Ç–µ–≥–∏.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
            event_date (datetime.date): –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
        """
    event_type_text = message.text.strip()
    type_mapping = {
        "üéÇ –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è": "–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è",
        "üíç –ì–æ–¥–æ–≤—â–∏–Ω–∞": "–ì–æ–¥–æ–≤—â–∏–Ω–∞",
        "‚è∞ –î–µ–¥–ª–∞–π–Ω": "–î–µ–¥–ª–∞–π–Ω",
        "‚ûï –ü—Ä–æ—á–µ–µ": "–ü—Ä–æ—á–µ–µ"
    }
    event_type = type_mapping.get(event_type_text)
    if not event_type:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        show_events_menu(message)
        return

    msg = bot.send_message(message.chat.id, "üîñ –í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, #–¥–µ–Ω—å—Ä–æ–∂–¥–µ–Ω–∏—è, #—Å–µ–º—å—è):")
    bot.register_next_step_handler(msg, process_event_tags, title, event_date, event_type)

def process_event_tags(message, title, event_date, event_type):
    """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ö—ç—à—Ç–µ–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
            event_date (datetime.date): –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
            event_type (str): –¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
        """
    tags = message.text.strip()
    chat_id = message.chat.id

    cur.execute("INSERT INTO events (chat_id, title, date, type, tags) VALUES (?,?,?,?,?)",
                (chat_id, title, event_date.strftime("%d-%m-%Y"), event_type, tags))
    conn.commit()

    bot.send_message(message.chat.id, "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

    menu(message)

@bot.message_handler(func=lambda m: m.text == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
def view_events(message):
    """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
    chat_id = message.chat.id
    cur.execute("SELECT event_id, title, date, type, tags FROM events WHERE chat_id = ?", (chat_id,))
    rows = cur.fetchall()

    if len(rows) == 0:
        bot.send_message(chat_id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
    else:
        for row in rows:
            event_id, title, date, event_type, tags = row
            response = f"**{title}**\nüìÖ –î–∞—Ç–∞: {date}\nüìå –¢–∏–ø: {event_type}\nüîñ –•—ç—à—Ç–µ–≥–∏: {tags}"
            keyboard = types.InlineKeyboardMarkup()
            delete_button = types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_event_{event_id}")
            keyboard.add(delete_button)
            bot.send_message(chat_id, response, parse_mode="Markdown", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_event_"))
def delete_event_callback(call):
    """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
    chat_id = call.message.chat.id
    event_id = int(call.data.split("_")[-1])

    cur.execute("SELECT title, date FROM events WHERE event_id = ? AND chat_id = ?", (event_id, chat_id))
    event = cur.fetchone()
    if not event:
        bot.answer_callback_query(call.id, "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        return

    title, date_str = event
    try:
        event_date = datetime.strptime(date_str, "%d-%m-%Y").date()
    except ValueError:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return

    cur.execute("DELETE FROM events WHERE event_id = ? AND chat_id = ?", (event_id, chat_id))
    conn.commit()

    bot.delete_message(chat_id, call.message.message_id)

    bot.send_message(chat_id, f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{title}' —É–¥–∞–ª–µ–Ω–æ.")

    bot.answer_callback_query(call.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

@bot.message_handler(func=lambda m: m.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
def create_note(message):
    """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
    msg = bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    bot.register_next_step_handler(msg, save_note)

def save_note(message):
    """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
    content = message.text.strip()
    chat_id = message.chat.id

    if not content:
        msg = bot.send_message(chat_id, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
        bot.register_next_step_handler(msg, save_note)
        return

    cur.execute("INSERT INTO notes (chat_id, content) VALUES (?, ?)", (chat_id, content))
    conn.commit()

    bot.send_message(chat_id, "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")

    menu(message)

@bot.message_handler(func=lambda m: m.text == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏")
def view_notes(message):
    """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
    chat_id = message.chat.id
    cur.execute("SELECT note_id, content FROM notes WHERE chat_id = ?", (chat_id,))
    rows = cur.fetchall()

    if len(rows) == 0:
        bot.send_message(chat_id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    else:
        for row in rows:
            note_id, content = row
            response = f"**–ó–∞–º–µ—Ç–∫–∞ {note_id}:**\n{content}"
            keyboard = types.InlineKeyboardMarkup()
            delete_button = types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_note_{note_id}")
            keyboard.add(delete_button)
            bot.send_message(chat_id, response, parse_mode="Markdown", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_note_"))
def delete_note_callback(call):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            call (telebot.types.CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
    chat_id = call.message.chat.id
    note_id = int(call.data.split("_")[-1])

    cur.execute("SELECT content FROM notes WHERE note_id = ? AND chat_id = ?", (note_id, chat_id))
    note = cur.fetchone()
    if not note:
        bot.answer_callback_query(call.id, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
        return

    cur.execute("DELETE FROM notes WHERE note_id = ? AND chat_id = ?", (note_id, chat_id))
    conn.commit()

    bot.delete_message(chat_id, call.message.message_id)

    bot.send_message(chat_id, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ {note_id} —É–¥–∞–ª–µ–Ω–∞.")

    bot.answer_callback_query(call.id, "–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")

@bot.message_handler(func=lambda m: m.text in ["üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üìù –ó–∞–º–µ—Ç–∫–∏", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
def MenuActions(message):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
    text = message.text

    if text == "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        show_events_menu(message)
    elif text == "üìù –ó–∞–º–µ—Ç–∫–∏":
        show_notes_menu(message)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        menu(message)

if __name__ == '__main__':
    print("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
